
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/scattering/spherical.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_scattering_spherical.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_scattering_spherical.py:


Circular Scatterer
==================

This example demonstrates the setup and execution of a circular scatterer experiment using LightWave2D.
We will define the simulation grid, add a circular scatterer and a line source, apply a perfectly matched layer (PML), run the simulation, and visualize the results.

.. GENERATED FROM PYTHON SOURCE LINES 10-11

Importing the necessary packages

.. GENERATED FROM PYTHON SOURCE LINES 11-15

.. code-block:: python3

    from LightWave2D.grid import Grid
    from LightWave2D.experiment import Experiment
    from MPSPlots import colormaps








.. GENERATED FROM PYTHON SOURCE LINES 16-17

Define the simulation grid

.. GENERATED FROM PYTHON SOURCE LINES 17-27

.. code-block:: python3

    grid = Grid(
        resolution=0.03e-6,  # Grid resolution in meters
        size_x=32e-6,       # Grid size in the x direction in meters
        size_y=20e-6,       # Grid size in the y direction in meters
        n_steps=200         # Number of time steps for the simulation
    )

    # Initialize the experiment with the defined grid
    experiment = Experiment(grid=grid)








.. GENERATED FROM PYTHON SOURCE LINES 28-29

Add a circular scatterer to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 29-36

.. code-block:: python3

    scatterer = experiment.add_circle(
        position=('30%', '50%'),  # Center position of the scatterer
        epsilon_r=1.5,            # Relative permittivity of the scatterer
        radius=0.5e-6,              # Radius of the circular scatterer in meters
        sigma=0e6
    )








.. GENERATED FROM PYTHON SOURCE LINES 37-38

Add a line source to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 38-45

.. code-block:: python3

    source = experiment.add_line_source(
        wavelength=1550e-9,         # Wavelength of the source in meters
        position_0=('10%', '80%'),  # Starting position of the source
        position_1=('10%', '20%'),  # Ending position of the source
        amplitude=10                # Amplitude of the source
    )








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Add a perfectly matched layer (PML) to absorb boundary reflections

.. GENERATED FROM PYTHON SOURCE LINES 47-53

.. code-block:: python3

    experiment.add_pml(
        order=1,          # Order of the PML polynomial profile
        width='10%',      # Width of the PML region as a percentage of grid size
        sigma_max=5000    # Maximum conductivity for the PML
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    PML(grid=Grid(resolution=3e-08, size_x=3.2e-05, size_y=2e-05, n_steps=200), width='10%', sigma_max=5000.0, order=1)



.. GENERATED FROM PYTHON SOURCE LINES 54-55

Plot the entire experiment setup

.. GENERATED FROM PYTHON SOURCE LINES 55-60

.. code-block:: python3

    experiment.plot()

    # Run the FDTD simulation
    experiment.run_fdtd()




.. image-sg:: /gallery/scattering/images/sphx_glr_spherical_001.png
   :alt: Fiber structure
   :srcset: /gallery/scattering/images/sphx_glr_spherical_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 61-62

Plot the last time frame of the computed fields

.. GENERATED FROM PYTHON SOURCE LINES 62-69

.. code-block:: python3

    experiment.plot_frame(
        frame_number=-1,  # Plot the last frame
        scale_max=1,      # Maximum scale for the field visualization
        colormap=colormaps.polytechnique.red_black_blue,  # Colormap for the plot
        show_intensity=True
    )




.. image-sg:: /gallery/scattering/images/sphx_glr_spherical_002.png
   :alt: Fiber structure
   :srcset: /gallery/scattering/images/sphx_glr_spherical_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 70-71

Render an animation of the field propagation over time

.. GENERATED FROM PYTHON SOURCE LINES 71-81

.. code-block:: python3

    animation = experiment.show_propagation(
        skip_frame=5,                            # Number of frames to skip in the animation
        unit_size=5,                             # Size of each unit in the animation
        colormap=colormaps.polytechnique.red_black_blue,  # Colormap for the animation
        scale_max=1,
        auto_adjust_clim=True
    )

    # Save the animation as a GIF file
    animation.save('./circular_scatterer_propagation_1_4.gif', writer='Pillow', fps=40)



.. image-sg:: /gallery/scattering/images/sphx_glr_spherical_003.png
   :alt: spherical
   :srcset: /gallery/scattering/images/sphx_glr_spherical_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MovieWriter Pillow unavailable; using Pillow instead.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.025 seconds)


.. _sphx_glr_download_gallery_scattering_spherical.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: spherical.py <spherical.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: spherical.ipynb <spherical.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
