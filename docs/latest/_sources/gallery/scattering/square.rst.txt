
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/scattering/square.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_scattering_square.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_scattering_square.py:


Square Scatterer
================

This example demonstrates the setup and execution of a square scatterer experiment using LightWave2D.
We will define the simulation grid, add a square scatterer and a line source, apply a perfectly matched layer (PML), run the simulation, and visualize the results.

.. GENERATED FROM PYTHON SOURCE LINES 10-11

Importing the necessary packages

.. GENERATED FROM PYTHON SOURCE LINES 11-15

.. code-block:: python3

    from LightWave2D.grid import Grid
    from LightWave2D.experiment import Experiment
    from MPSPlots.colormaps import polytechnique








.. GENERATED FROM PYTHON SOURCE LINES 16-17

Define the simulation grid

.. GENERATED FROM PYTHON SOURCE LINES 17-27

.. code-block:: python3

    grid = Grid(
        resolution=0.1e-6,  # Grid resolution in meters
        size_x=4 * 8e-6,    # Grid size in the x direction in meters
        size_y=4 * 4e-6,    # Grid size in the y direction in meters
        n_steps=500         # Number of time steps for the simulation
    )

    # Initialize the experiment with the defined grid
    experiment = Experiment(grid=grid)








.. GENERATED FROM PYTHON SOURCE LINES 28-29

Add a square scatterer to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 29-35

.. code-block:: python3

    scatterer = experiment.add_square(
        position=('25%', '50%'),  # Center position of the scatterer
        epsilon_r=2,              # Relative permittivity of the scatterer
        side_length=5e-6          # Side length of the square scatterer in meters
    )








.. GENERATED FROM PYTHON SOURCE LINES 36-37

Add a line source to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 37-44

.. code-block:: python3

    source = experiment.add_line_source(
        wavelength=1550e-9,       # Wavelength of the source in meters
        position_0=('10%', '100%'),  # Starting position of the source
        position_1=('10%', '0%'),    # Ending position of the source
        amplitude=10              # Amplitude of the source
    )








.. GENERATED FROM PYTHON SOURCE LINES 45-46

Add a perfectly matched layer (PML) to absorb boundary reflections

.. GENERATED FROM PYTHON SOURCE LINES 46-52

.. code-block:: python3

    experiment.add_pml(
        order=1,          # Order of the PML polynomial profile
        width='10%',      # Width of the PML region as a percentage of grid size
        sigma_max=5000    # Maximum conductivity for the PML
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    PML(grid=Grid(resolution=1e-07, size_x=3.2e-05, size_y=1.6e-05, n_steps=500), width='10%', sigma_max=5000.0, order=1)



.. GENERATED FROM PYTHON SOURCE LINES 53-54

Add a point detector to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 54-58

.. code-block:: python3

    detector = experiment.add_point_detector(
        position=(25e-6, 'center')  # Position of the detector
    )








.. GENERATED FROM PYTHON SOURCE LINES 59-60

Plot the entire experiment setup

.. GENERATED FROM PYTHON SOURCE LINES 60-65

.. code-block:: python3

    experiment.plot()

    # Run the FDTD simulation
    experiment.run_fdtd()




.. image-sg:: /gallery/scattering/images/sphx_glr_square_001.png
   :alt: Fiber structure
   :srcset: /gallery/scattering/images/sphx_glr_square_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 66-67

Plot the field measured at the detector

.. GENERATED FROM PYTHON SOURCE LINES 67-69

.. code-block:: python3

    detector.plot_data()




.. image-sg:: /gallery/scattering/images/sphx_glr_square_002.png
   :alt: square
   :srcset: /gallery/scattering/images/sphx_glr_square_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 70-71

Plot the last time frame of the computed fields

.. GENERATED FROM PYTHON SOURCE LINES 71-76

.. code-block:: python3

    experiment.plot_frame(
        frame_number=-1,  # Plot the last frame
        scale_max=2       # Maximum scale for the field visualization
    )




.. image-sg:: /gallery/scattering/images/sphx_glr_square_003.png
   :alt: Fiber structure
   :srcset: /gallery/scattering/images/sphx_glr_square_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 77-78

Render an animation of the field propagation over time

.. GENERATED FROM PYTHON SOURCE LINES 78-85

.. code-block:: python3

    animation = experiment.render_propagation(
        skip_frame=5,                            # Number of frames to skip in the animation
        colormap=polytechnique.red_black_blue    # Colormap for the animation
    )

    # Save the animation as a GIF file
    animation.save('./square_scatterer_propagation.gif', fps=10)



.. image-sg:: /gallery/scattering/images/sphx_glr_square_004.png
   :alt: square
   :srcset: /gallery/scattering/images/sphx_glr_square_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MovieWriter ffmpeg unavailable; using Pillow instead.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.149 seconds)


.. _sphx_glr_download_gallery_scattering_square.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: square.py <square.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: square.ipynb <square.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
