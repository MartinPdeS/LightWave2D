
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/scattering/spherical_impulsion.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_scattering_spherical_impulsion.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_scattering_spherical_impulsion.py:


Circular Scatterer
==================

This example demonstrates the setup and execution of a circular scatterer experiment using LightWave2D.
We will define the simulation grid, add a circular scatterer and a line source, apply a perfectly matched layer (PML), run the simulation, and visualize the results.

.. GENERATED FROM PYTHON SOURCE LINES 10-11

Importing the necessary packages

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: Python

    from LightWave2D.grid import Grid
    from LightWave2D.experiment import Experiment
    from MPSPlots import colormaps
    import LightWave2D.units as units








.. GENERATED FROM PYTHON SOURCE LINES 17-18

Define the simulation grid

.. GENERATED FROM PYTHON SOURCE LINES 18-28

.. code-block:: Python

    grid = Grid(
        resolution=0.2 * units.micrometer,
        size_x=52 * units.micrometer,
        size_y=40 * units.micrometer,
        n_steps=800
    )

    # Initialize the experiment with the defined grid
    experiment = Experiment(grid=grid)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Add a circular scatterer to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 30-37

.. code-block:: Python

    scatterer = experiment.add_circle(
        position=('50%', '50%'),  # Center position of the scatterer
        epsilon_r=2.5,            # Relative permittivity of the scatterer
        radius=4 * units.micrometer,
        sigma=0 * (units.siemens / units.meter)  # Conductivity of the scatterer
    )








.. GENERATED FROM PYTHON SOURCE LINES 38-39

Add a line source to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 39-47

.. code-block:: Python

    source = experiment.add_line_impulsion(
        duration=1 * units.femtosecond,
        position_0=('30%', '60%'),  # Starting position of the source
        position_1=('30%', '40%'),  # Ending position of the source
        amplitude=1,                # Amplitude of the source
        delay=0 * units.femtosecond
    )








.. GENERATED FROM PYTHON SOURCE LINES 48-49

Add a perfectly matched layer (PML) to absorb boundary reflections

.. GENERATED FROM PYTHON SOURCE LINES 49-55

.. code-block:: Python

    experiment.add_pml(
        order=1,          # Order of the PML polynomial profile
        width='20%',      # Width of the PML region as a percentage of grid size
        sigma_max=10_000 * (units.siemens / units.meter)    # Maximum conductivity for the PML
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    PML(grid=Grid(resolution=<Quantity(0.2, 'micrometer')>, size_x=<Quantity(52, 'micrometer')>, size_y=<Quantity(40, 'micrometer')>, n_steps=800), width='20%', sigma_max=<Quantity(10000, 'siemens / meter')>, order=1)



.. GENERATED FROM PYTHON SOURCE LINES 56-57

Plot the entire experiment setup

.. GENERATED FROM PYTHON SOURCE LINES 57-63

.. code-block:: Python

    experiment.plot()

    # Run the FDTD simulation
    experiment.run()





.. image-sg:: /gallery/scattering/images/sphx_glr_spherical_impulsion_001.png
   :alt: Fiber structure
   :srcset: /gallery/scattering/images/sphx_glr_spherical_impulsion_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 64-65

Render an animation of the field propagation over time

.. GENERATED FROM PYTHON SOURCE LINES 65-74

.. code-block:: Python

    animation = experiment.show_propagation(
        skip_frame=5,                            # Number of frames to skip in the animation
        unit_size=5,                             # Size of each unit in the animation
        colormap=colormaps.polytechnique.red_black_blue,  # Colormap for the animation
        enhance_contrast=4
    )

    # Save the animation as a GIF file
    animation.save('./circular_scatterer_propagation.gif', writer='Pillow', fps=30)



.. image-sg:: /gallery/scattering/images/sphx_glr_spherical_impulsion_002.png
   :alt: spherical impulsion
   :srcset: /gallery/scattering/images/sphx_glr_spherical_impulsion_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MovieWriter Pillow unavailable; using Pillow instead.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 11.970 seconds)


.. _sphx_glr_download_gallery_scattering_spherical_impulsion.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: spherical_impulsion.ipynb <spherical_impulsion.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: spherical_impulsion.py <spherical_impulsion.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: spherical_impulsion.zip <spherical_impulsion.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
