
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/scattering/spherical.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_scattering_spherical.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_scattering_spherical.py:


Circular Scatterer
==================

This example demonstrates the setup and execution of a circular scatterer experiment using LightWave2D.
We will define the simulation grid, add a circular scatterer and a line source, apply a perfectly matched layer (PML), run the simulation, and visualize the results.

.. GENERATED FROM PYTHON SOURCE LINES 10-11

Importing the necessary packages

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: Python

    from LightWave2D.grid import Grid
    from LightWave2D.experiment import Experiment
    from MPSPlots import colormaps
    from TypedUnit import ureg








.. GENERATED FROM PYTHON SOURCE LINES 17-18

Define the simulation grid

.. GENERATED FROM PYTHON SOURCE LINES 18-28

.. code-block:: Python

    grid = Grid(
        resolution=0.03 * ureg.micrometer,
        size_x=32 * ureg.micrometer,
        size_y=20 * ureg.micrometer,
        n_steps=200,
    )

    # Initialize the experiment with the defined grid
    experiment = Experiment(grid=grid)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Add a circular scatterer to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 30-37

.. code-block:: Python

    scatterer = experiment.add_circle(
        position=("30%", "50%"),  # Center position of the scatterer
        epsilon_r=1.5,  # Relative permittivity of the scatterer
        radius=3 * ureg.micrometer,
        sigma=0 * (ureg.siemens / ureg.meter),  # Conductivity of the scatterer
    )








.. GENERATED FROM PYTHON SOURCE LINES 38-39

Add a line source to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 39-46

.. code-block:: Python

    source = experiment.add_line_source(
        wavelength=1550 * ureg.nanometer,
        position_0=("10%", "80%"),  # Starting position of the source
        position_1=("10%", "20%"),  # Ending position of the source
        amplitude=10,  # Amplitude of the source
    )








.. GENERATED FROM PYTHON SOURCE LINES 47-48

Add a perfectly matched layer (PML) to absorb boundary reflections

.. GENERATED FROM PYTHON SOURCE LINES 48-54

.. code-block:: Python

    experiment.add_pml(
        order=1,  # Order of the PML polynomial profile
        width="10%",  # Width of the PML region as a percentage of grid size
        sigma_max=5000 * (ureg.siemens / ureg.meter),  # Maximum conductivity for the PML
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    PML(grid=Grid(resolution=<Quantity(0.03, 'micrometer')>, size_x=<Quantity(32, 'micrometer')>, size_y=<Quantity(20, 'micrometer')>, n_steps=200), width='10%', sigma_max=<Quantity(5000, 'siemens / meter')>, order=1)



.. GENERATED FROM PYTHON SOURCE LINES 55-56

Plot the entire experiment setup

.. GENERATED FROM PYTHON SOURCE LINES 56-61

.. code-block:: Python

    experiment.plot()

    # Run the FDTD simulation
    experiment.run()




.. image-sg:: /gallery/scattering/images/sphx_glr_spherical_001.png
   :alt: Fiber structure
   :srcset: /gallery/scattering/images/sphx_glr_spherical_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 62-63

Plot the last time frame of the computed fields

.. GENERATED FROM PYTHON SOURCE LINES 63-70

.. code-block:: Python

    experiment.plot_frame(
        frame_number=-1,  # Plot the last frame
        enhance_contrast=1,  # Maximum scale for the field visualization
        colormap=colormaps.polytechnique.red_black_blue,  # Colormap for the plot
        show_intensity=True,
    )




.. image-sg:: /gallery/scattering/images/sphx_glr_spherical_002.png
   :alt: spherical
   :srcset: /gallery/scattering/images/sphx_glr_spherical_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 800x500 with 2 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 71-72

Render an animation of the field propagation over time

.. GENERATED FROM PYTHON SOURCE LINES 72-79

.. code-block:: Python

    animation = experiment.render_propagation(
        skip_frame=5,  # Number of frames to skip in the animation
        colormap=colormaps.polytechnique.red_black_blue,  # Colormap for the animation
        enhance_contrast=3,  # Enhance contrast for better visualization
        save_as="./circular_scatterer.gif",  # Save the animation as a GIF file
        fps=30,
    )



.. image-sg:: /gallery/scattering/images/sphx_glr_spherical_003.png
   :alt: spherical
   :srcset: /gallery/scattering/images/sphx_glr_spherical_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MovieWriter Pillow unavailable; using Pillow instead.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 24.458 seconds)


.. _sphx_glr_download_gallery_scattering_spherical.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: spherical.ipynb <spherical.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: spherical.py <spherical.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: spherical.zip <spherical.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
