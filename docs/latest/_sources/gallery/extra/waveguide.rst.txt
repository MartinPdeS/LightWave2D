
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/extra/waveguide.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_extra_waveguide.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_extra_waveguide.py:


Waveguide
=========

This example demonstrates the setup and execution of a waveguide experiment using LightWave2D.
We will define the simulation grid, add a waveguide and a line source, apply a perfectly matched layer (PML), run the simulation, and visualize the results.

.. GENERATED FROM PYTHON SOURCE LINES 10-11

Importing the necessary packages

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: Python

    from LightWave2D.grid import Grid
    from LightWave2D.experiment import Experiment
    from MPSPlots import colormaps
    from LightWave2D import units








.. GENERATED FROM PYTHON SOURCE LINES 17-18

Define the simulation grid

.. GENERATED FROM PYTHON SOURCE LINES 18-28

.. code-block:: Python

    grid = Grid(
        resolution=0.1 * units.micrometer,  # Grid resolution in meters
        size_x=50 * units.micrometer,       # Grid size in the x direction in meters
        size_y=15 * units.micrometer,       # Grid size in the y direction in meters
        n_steps=100                          # Number of time steps for the simulation
    )

    # Initialize the experiment with the defined grid
    experiment = Experiment(grid=grid)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Add a waveguide to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 30-45

.. code-block:: Python

    scatterer = experiment.add_waveguide(
        position_0=('0%', '50%'),    # Starting position of the waveguide
        position_1=('100%', '50%'),  # Ending position of the waveguide
        width=2 * units.micrometer,  # Width of the waveguide in meters
        epsilon_r=2                  # Relative permittivity of the waveguide
    )

    # Add a line source to the experiment
    source = experiment.add_line_source(
        wavelength=1550 * units.nanometer,         # Wavelength of the source in meters
        position_0=('20%', '45%'),  # Starting position of the source
        position_1=('20%', '55%'),  # Ending position of the source
        amplitude=10                # Amplitude of the source
    )








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Add a perfectly matched layer (PML) to absorb boundary reflections

.. GENERATED FROM PYTHON SOURCE LINES 47-53

.. code-block:: Python

    experiment.add_pml(
        order=1,          # Order of the PML polynomial profile
        width='10%',      # Width of the PML region as a percentage of grid size
        sigma_max=5000 * (units.siemens / units.meter)    # Maximum conductivity for the PML
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    PML(grid=Grid(resolution=<Quantity(0.1, 'micrometer')>, size_x=<Quantity(50, 'micrometer')>, size_y=<Quantity(15, 'micrometer')>, n_steps=100), width='10%', sigma_max=<Quantity(5000, 'siemens / meter')>, order=1)



.. GENERATED FROM PYTHON SOURCE LINES 54-55

Run the FDTD simulation

.. GENERATED FROM PYTHON SOURCE LINES 55-57

.. code-block:: Python

    experiment.run()








.. GENERATED FROM PYTHON SOURCE LINES 58-59

Plot the experiment layout

.. GENERATED FROM PYTHON SOURCE LINES 59-62

.. code-block:: Python

    experiment.plot()





.. image-sg:: /gallery/extra/images/sphx_glr_waveguide_001.png
   :alt: Fiber structure
   :srcset: /gallery/extra/images/sphx_glr_waveguide_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 63-64

Plot the resulting electric field distribution at a certain time

.. GENERATED FROM PYTHON SOURCE LINES 64-66

.. code-block:: Python

    experiment.plot_frame(frame_number=-1)




.. image-sg:: /gallery/extra/images/sphx_glr_waveguide_002.png
   :alt: Fiber structure
   :srcset: /gallery/extra/images/sphx_glr_waveguide_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-68

Render an animation of the wave propagation

.. GENERATED FROM PYTHON SOURCE LINES 68-76

.. code-block:: Python

    animation = experiment.render_propagation(
        skip_frame=10,                            # Number of frames to skip in the animation
        colormap=colormaps.polytechnique.red_black_blue,  # Colormap for the animation
        enhance_contrast=2                               # Maximum scale for the field visualization
    )

    # Save the animation as a GIF file
    _ = animation.save('./waveguide_propagation.gif', writer='Pillow', fps=20)



.. image-sg:: /gallery/extra/images/sphx_glr_waveguide_003.png
   :alt: waveguide
   :srcset: /gallery/extra/images/sphx_glr_waveguide_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MovieWriter Pillow unavailable; using Pillow instead.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.852 seconds)


.. _sphx_glr_download_gallery_extra_waveguide.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: waveguide.ipynb <waveguide.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: waveguide.py <waveguide.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: waveguide.zip <waveguide.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
