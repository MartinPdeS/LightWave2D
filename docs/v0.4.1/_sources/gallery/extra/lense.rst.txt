
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/extra/lense.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_extra_lense.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_extra_lense.py:


Circular Scatterer
==================

This example demonstrates the setup and execution of a circular scatterer experiment using LightWave2D.
We will define the simulation grid, add a lens scatterer, a point source, apply a perfectly matched layer (PML), run the simulation, and visualize the results.

.. GENERATED FROM PYTHON SOURCE LINES 10-11

Importing the necessary packages

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: Python

    from LightWave2D.grid import Grid
    from LightWave2D.experiment import Experiment
    from MPSPlots import colormaps
    from LightWave2D import units








.. GENERATED FROM PYTHON SOURCE LINES 17-18

Define the simulation grid

.. GENERATED FROM PYTHON SOURCE LINES 18-29

.. code-block:: Python

    grid = Grid(
        resolution=0.1 * units.micrometer,  # Grid resolution in meters
        size_x=60 * units.micrometer,       # Grid size in the x direction in meters
        size_y=30 * units.micrometer,       # Grid size in the y direction in meters
        n_steps=100        # Number of time steps for the simulation
    )

    # Initialize the experiment with the defined grid
    experiment = Experiment(grid=grid)









.. GENERATED FROM PYTHON SOURCE LINES 30-31

Add a lens scatterer to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 31-38

.. code-block:: Python

    scatterer = experiment.add_lense(
        position=('35%', '50%'),  # Center position of the lens
        epsilon_r=2,              # Relative permittivity of the lens
        curvature=10 * units.micrometer,          # Curvature of the lens in meters
        width=5 * units.micrometer                # Width of the lens in meters
    )








.. GENERATED FROM PYTHON SOURCE LINES 39-40

Add a point source to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 40-46

.. code-block:: Python

    source = experiment.add_point_source(
        wavelength=1550 * units.nanometer,       # Wavelength of the source in meters
        position=('10%', '50%'),  # Position of the source
        amplitude=10              # Amplitude of the source
    )








.. GENERATED FROM PYTHON SOURCE LINES 47-48

Add a perfectly matched layer (PML) to absorb boundary reflections

.. GENERATED FROM PYTHON SOURCE LINES 48-55

.. code-block:: Python

    experiment.add_pml(
        order=1,          # Order of the PML polynomial profile
        width='10%',      # Width of the PML region as a percentage of grid size
        sigma_max=500 * (units.siemens / units.meter)    # Maximum conductivity for the PML
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    PML(grid=Grid(resolution=<Quantity(0.1, 'micrometer')>, size_x=<Quantity(60, 'micrometer')>, size_y=<Quantity(30, 'micrometer')>, n_steps=100), width='10%', sigma_max=<Quantity(500, 'siemens / meter')>, order=1)



.. GENERATED FROM PYTHON SOURCE LINES 56-57

Plot the experiment layout

.. GENERATED FROM PYTHON SOURCE LINES 57-64

.. code-block:: Python

    experiment.plot()


    # Run the FDTD simulation
    experiment.run()





.. image-sg:: /gallery/extra/images/sphx_glr_lense_001.png
   :alt: Fiber structure
   :srcset: /gallery/extra/images/sphx_glr_lense_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 65-66

Plot the last time frame of the computed fields

.. GENERATED FROM PYTHON SOURCE LINES 66-73

.. code-block:: Python

    experiment.plot_frame(
        frame_number=-1,  # Plot the last frame
        enhance_contrast=2,      # Maximum scale for the field visualization
        colormap=colormaps.polytechnique.red_black_blue  # Colormap for the plot
    )





.. image-sg:: /gallery/extra/images/sphx_glr_lense_002.png
   :alt: Fiber structure
   :srcset: /gallery/extra/images/sphx_glr_lense_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 74-75

Render an animation of the field propagation over time

.. GENERATED FROM PYTHON SOURCE LINES 75-84

.. code-block:: Python

    animation = experiment.show_propagation(
        skip_frame=5,                            # Number of frames to skip in the animation
        unit_size=5,                             # Size of each unit in the animation
        colormap=colormaps.polytechnique.red_black_blue  # Colormap for the animation
    )


    # Save the animation as a GIF file
    animation.save('./lens_propagation.gif', writer='Pillow', fps=10)



.. image-sg:: /gallery/extra/images/sphx_glr_lense_003.png
   :alt: lense
   :srcset: /gallery/extra/images/sphx_glr_lense_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MovieWriter Pillow unavailable; using Pillow instead.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.050 seconds)


.. _sphx_glr_download_gallery_extra_lense.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: lense.ipynb <lense.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: lense.py <lense.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: lense.zip <lense.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
