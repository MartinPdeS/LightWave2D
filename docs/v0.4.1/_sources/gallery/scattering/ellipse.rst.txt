
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/scattering/ellipse.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_scattering_ellipse.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_scattering_ellipse.py:


Elliptic Scatterer
==================

This example demonstrates the setup and execution of an elliptic scatterer experiment using LightWave2D.
We will define the simulation grid, add an elliptic scatterer and a line source, apply a perfectly matched layer (PML), run the simulation, and visualize the results.

.. GENERATED FROM PYTHON SOURCE LINES 10-11

Importing the necessary packages

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: Python

    from LightWave2D.grid import Grid
    from LightWave2D.experiment import Experiment
    from MPSPlots import colormaps
    import LightWave2D.units as units








.. GENERATED FROM PYTHON SOURCE LINES 17-18

Define the simulation grid

.. GENERATED FROM PYTHON SOURCE LINES 18-28

.. code-block:: Python

    grid = Grid(
        resolution=0.1 * units.micrometer,
        size_x=40 * units.micrometer,
        size_y=30 * units.micrometer,
        n_steps=400
    )

    # Initialize the experiment with the defined grid
    experiment = Experiment(grid=grid)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Add an elliptic scatterer to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 30-37

.. code-block:: Python

    scatterer = experiment.add_ellipse(
        position=('30%', '40%'),  # Center position of the ellipse
        width=4 * units.micrometer,
        height=10 * units.micrometer,
        epsilon_r=2               # Relative permittivity of the ellipse
    )








.. GENERATED FROM PYTHON SOURCE LINES 38-39

Add a line source to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 39-46

.. code-block:: Python

    source = experiment.add_line_source(
        wavelength=1550 * units.nanometer,
        position_0=('10%', '100%'),  # Starting position of the source
        position_1=('10%', '0%'),    # Ending position of the source
        amplitude=10                 # Amplitude of the source
    )








.. GENERATED FROM PYTHON SOURCE LINES 47-48

Add a perfectly matched layer (PML) to absorb boundary reflections

.. GENERATED FROM PYTHON SOURCE LINES 48-60

.. code-block:: Python

    experiment.add_pml(
        order=1,          # Order of the PML polynomial profile
        width='10%',      # Width of the PML region as a percentage of grid size
        sigma_max=5000 * units.siemens / units.meter    # Maximum conductivity for the PML
    )

    # Run the FDTD simulation
    experiment.run()

    # Plot the entire experiment setup
    # experiment.plot()








.. GENERATED FROM PYTHON SOURCE LINES 61-62

Plot the last time frame of the computed fields

.. GENERATED FROM PYTHON SOURCE LINES 62-68

.. code-block:: Python

    experiment.plot_frame(
        frame_number=-1,  # Plot the last frame
        enhance_contrast=2,
        colormap=colormaps.polytechnique.red_black_blue  # Colormap for the plot
    )




.. image-sg:: /gallery/scattering/images/sphx_glr_ellipse_001.png
   :alt: Fiber structure
   :srcset: /gallery/scattering/images/sphx_glr_ellipse_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-70

Save the last time frame as an image

.. GENERATED FROM PYTHON SOURCE LINES 70-76

.. code-block:: Python

    experiment.save_frame_as_image(
        frame_number=-1,  # Frame number to save
        enhance_contrast=2,
        filename='elliptic_scatterer_last_frame.png'  # Filename for the image
    )




.. image-sg:: /gallery/scattering/images/sphx_glr_ellipse_002.png
   :alt: Fiber structure
   :srcset: /gallery/scattering/images/sphx_glr_ellipse_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 77-78

Render an animation of the field propagation over time

.. GENERATED FROM PYTHON SOURCE LINES 78-86

.. code-block:: Python

    animation = experiment.render_propagation(
        skip_frame=5,                            # Number of frames to skip in the animation
        unit_size=5,                             # Size of each unit in the animation
        colormap=colormaps.polytechnique.red_black_blue  # Colormap for the animation
    )

    # Save the animation as a GIF file
    animation.save('./elliptic_scatterer_propagation.gif', writer='Pillow', fps=10)



.. image-sg:: /gallery/scattering/images/sphx_glr_ellipse_003.png
   :alt: ellipse
   :srcset: /gallery/scattering/images/sphx_glr_ellipse_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MovieWriter Pillow unavailable; using Pillow instead.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 11.274 seconds)


.. _sphx_glr_download_gallery_scattering_ellipse.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: ellipse.ipynb <ellipse.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: ellipse.py <ellipse.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: ellipse.zip <ellipse.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
