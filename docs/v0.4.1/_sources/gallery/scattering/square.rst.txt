
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/scattering/square.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_scattering_square.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_scattering_square.py:


Square Scatterer
================

This example demonstrates the setup and execution of a square scatterer experiment using LightWave2D.
We will define the simulation grid, add a square scatterer and a line source, apply a perfectly matched layer (PML), run the simulation, and visualize the results.

.. GENERATED FROM PYTHON SOURCE LINES 10-11

Importing the necessary packages

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: Python

    from LightWave2D.grid import Grid
    from LightWave2D.experiment import Experiment
    from MPSPlots.colormaps import polytechnique
    import LightWave2D.units as units








.. GENERATED FROM PYTHON SOURCE LINES 17-18

Define the simulation grid

.. GENERATED FROM PYTHON SOURCE LINES 18-28

.. code-block:: Python

    grid = Grid(
        resolution=0.1 * units.micrometer,  # Grid resolution
        size_x=32 * units.micrometer,       # Grid size in the x direction
        size_y=16 * units.micrometer,       # Grid size in the y direction
        n_steps=500
    )

    # Initialize the experiment with the defined grid
    experiment = Experiment(grid=grid)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Add a square scatterer to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 30-36

.. code-block:: Python

    scatterer = experiment.add_square(
        position=('25%', '50%'),  # Center position of the scatterer
        epsilon_r=2,              # Relative permittivity of the scatterer
        side_length=5 * units.micrometer  # Side length of the square scatterer
    )








.. GENERATED FROM PYTHON SOURCE LINES 37-38

Add a line source to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 38-45

.. code-block:: Python

    source = experiment.add_line_source(
        wavelength=1550 * units.nanometer,  # Wavelength of the source
        position_0=('10%', '100%'),  # Starting position of the source
        position_1=('10%', '0%'),    # Ending position of the source
        amplitude=10              # Amplitude of the source
    )








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Add a perfectly matched layer (PML) to absorb boundary reflections

.. GENERATED FROM PYTHON SOURCE LINES 47-53

.. code-block:: Python

    experiment.add_pml(
        order=1,          # Order of the PML polynomial profile
        width='10%',      # Width of the PML region as a percentage of grid size
        sigma_max=5000 * units.siemens / units.meter    # Maximum conductivity for the PML
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    PML(grid=Grid(resolution=<Quantity(0.1, 'micrometer')>, size_x=<Quantity(32, 'micrometer')>, size_y=<Quantity(16, 'micrometer')>, n_steps=500), width='10%', sigma_max=<Quantity(5000.0, 'siemens / meter')>, order=1)



.. GENERATED FROM PYTHON SOURCE LINES 54-55

Add a point detector to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 55-59

.. code-block:: Python

    detector = experiment.add_point_detector(
        position=(25 * units.micrometer, 'center')  # Position of the detector
    )








.. GENERATED FROM PYTHON SOURCE LINES 60-61

Plot the entire experiment setup

.. GENERATED FROM PYTHON SOURCE LINES 61-66

.. code-block:: Python

    experiment.plot()

    # Run the FDTD simulation
    experiment.run()




.. image-sg:: /gallery/scattering/images/sphx_glr_square_001.png
   :alt: Fiber structure
   :srcset: /gallery/scattering/images/sphx_glr_square_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-68

Plot the field measured at the detector

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: Python

    detector.plot_data()




.. image-sg:: /gallery/scattering/images/sphx_glr_square_002.png
   :alt: square
   :srcset: /gallery/scattering/images/sphx_glr_square_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/matplotlib/cbook.py:1355: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.
      return np.asarray(x, float)




.. GENERATED FROM PYTHON SOURCE LINES 71-72

Plot the last time frame of the computed fields

.. GENERATED FROM PYTHON SOURCE LINES 72-77

.. code-block:: Python

    experiment.plot_frame(
        frame_number=-1,  # Plot the last frame
        enhance_contrast=2       # Maximum scale for the field visualization
    )




.. image-sg:: /gallery/scattering/images/sphx_glr_square_003.png
   :alt: Fiber structure
   :srcset: /gallery/scattering/images/sphx_glr_square_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-79

Render an animation of the field propagation over time

.. GENERATED FROM PYTHON SOURCE LINES 79-86

.. code-block:: Python

    animation = experiment.render_propagation(
        skip_frame=5,                            # Number of frames to skip in the animation
        colormap=polytechnique.red_black_blue    # Colormap for the animation
    )

    # Save the animation as a GIF file
    animation.save('./square_scatterer_propagation.gif', fps=10)



.. image-sg:: /gallery/scattering/images/sphx_glr_square_004.png
   :alt: square
   :srcset: /gallery/scattering/images/sphx_glr_square_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MovieWriter ffmpeg unavailable; using Pillow instead.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 8.883 seconds)


.. _sphx_glr_download_gallery_scattering_square.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: square.ipynb <square.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: square.py <square.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: square.zip <square.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
