
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/scattering/ellipse.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_scattering_ellipse.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_scattering_ellipse.py:


Elliptic Scatterer
==================

This example demonstrates the setup and execution of an elliptic scatterer experiment using LightWave2D.
We will define the simulation grid, add an elliptic scatterer and a line source, apply a perfectly matched layer (PML), run the simulation, and visualize the results.

.. GENERATED FROM PYTHON SOURCE LINES 10-11

Importing the necessary packages

.. GENERATED FROM PYTHON SOURCE LINES 11-15

.. code-block:: python3

    from LightWave2D.grid import Grid
    from LightWave2D.experiment import Experiment
    from MPSPlots import colormaps








.. GENERATED FROM PYTHON SOURCE LINES 16-17

Define the simulation grid

.. GENERATED FROM PYTHON SOURCE LINES 17-27

.. code-block:: python3

    grid = Grid(
        resolution=0.1e-6,  # Grid resolution in meters
        size_x=40e-6,       # Grid size in the x direction in meters
        size_y=30e-6,       # Grid size in the y direction in meters
        n_steps=100        # Number of time steps for the simulation
    )

    # Initialize the experiment with the defined grid
    experiment = Experiment(grid=grid)








.. GENERATED FROM PYTHON SOURCE LINES 28-29

Add an elliptic scatterer to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 29-36

.. code-block:: python3

    scatterer = experiment.add_ellipse(
        position=('30%', '40%'),  # Center position of the ellipse
        width=4e-6,               # Width of the ellipse in meters
        height=10e-6,             # Height of the ellipse in meters
        epsilon_r=2               # Relative permittivity of the ellipse
    )








.. GENERATED FROM PYTHON SOURCE LINES 37-38

Add a line source to the experiment

.. GENERATED FROM PYTHON SOURCE LINES 38-45

.. code-block:: python3

    source = experiment.add_line_source(
        wavelength=1550e-9,       # Wavelength of the source in meters
        position_0=('10%', '100%'),  # Starting position of the source
        position_1=('10%', '0%'),    # Ending position of the source
        amplitude=10              # Amplitude of the source
    )








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Add a perfectly matched layer (PML) to absorb boundary reflections

.. GENERATED FROM PYTHON SOURCE LINES 47-59

.. code-block:: python3

    experiment.add_pml(
        order=1,          # Order of the PML polynomial profile
        width='10%',      # Width of the PML region as a percentage of grid size
        sigma_max=5000    # Maximum conductivity for the PML
    )

    # Run the FDTD simulation
    experiment.run_fdtd()

    # Plot the entire experiment setup
    experiment.plot()




.. image-sg:: /gallery/scattering/images/sphx_glr_ellipse_001.png
   :alt: Fiber structure
   :srcset: /gallery/scattering/images/sphx_glr_ellipse_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 60-61

Plot the last time frame of the computed fields

.. GENERATED FROM PYTHON SOURCE LINES 61-66

.. code-block:: python3

    experiment.plot_frame(
        frame_number=-1,  # Plot the last frame
        colormap=colormaps.polytechnique.red_black_blue  # Colormap for the plot
    )




.. image-sg:: /gallery/scattering/images/sphx_glr_ellipse_002.png
   :alt: Fiber structure
   :srcset: /gallery/scattering/images/sphx_glr_ellipse_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-68

Save the last time frame as an image

.. GENERATED FROM PYTHON SOURCE LINES 68-73

.. code-block:: python3

    experiment.save_frame_as_image(
        frame_number=-1,  # Frame number to save
        filename='elliptic_scatterer_last_frame.png'  # Filename for the image
    )




.. image-sg:: /gallery/scattering/images/sphx_glr_ellipse_003.png
   :alt: Fiber structure
   :srcset: /gallery/scattering/images/sphx_glr_ellipse_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 74-75

Render an animation of the field propagation over time

.. GENERATED FROM PYTHON SOURCE LINES 75-83

.. code-block:: python3

    animation = experiment.render_propagation(
        skip_frame=5,                            # Number of frames to skip in the animation
        unit_size=5,                             # Size of each unit in the animation
        colormap=colormaps.polytechnique.red_black_blue  # Colormap for the animation
    )

    # Save the animation as a GIF file
    animation.save('./elliptic_scatterer_propagation.gif', writer='Pillow', fps=10)



.. image-sg:: /gallery/scattering/images/sphx_glr_ellipse_004.png
   :alt: ellipse
   :srcset: /gallery/scattering/images/sphx_glr_ellipse_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MovieWriter Pillow unavailable; using Pillow instead.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.565 seconds)


.. _sphx_glr_download_gallery_scattering_ellipse.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: ellipse.py <ellipse.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: ellipse.ipynb <ellipse.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
